{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, LineController, Title, Tooltip, Legend } from 'chart.js';\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, LineController, Title, Tooltip, Legend);\nlet AppComponent = class AppComponent {\n  constructor(financeService) {\n    this.financeService = financeService;\n    this.error = null;\n    this.ticker = '';\n    this.stockData = null; // Use the interface and initialize as null\n    this.revenueTrends = {\n      dates: ['2024-01-01', '2024-02-01', '2024-03-01', '2024-04-01', '2024-05-01'],\n      revenues: [150000, 155000, 160000, 162000, 165000]\n    };\n    this.earningsInsights = {\n      EPS: ['2.50', '2.75', '3.00', '3.25', '3.50'],\n      ProfitMargin: ['20%', '21%', '21.5%', '22%', '22.5%']\n    };\n  }\n  ngOnInit() {\n    this.fetchHistoricalTopStocks();\n    this.fetchMarketNews();\n  }\n  ngAfterViewInit() {\n    this.initCharts();\n  }\n  initCharts() {\n    this.initRevenueChart();\n    this.initEarningsChart();\n  }\n  changeChart(type) {\n    if (!this.stockData) {\n      return; // Guard clause if there's no data\n    }\n\n    this.initChart(type, {\n      labels: Object.keys(this.stockData),\n      datasets: [{\n        data: Object.values(this.stockData),\n        label: \"Stock Performance\",\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1\n      }]\n    });\n  }\n  initChart(type, data) {\n    if (this.chart) {\n      this.chart.destroy();\n    }\n    const context = this.stockChart.nativeElement.getContext('2d');\n    if (!context) {\n      console.error('Failed to get canvas context');\n      return;\n    }\n    const config = {\n      type: type,\n      data: data,\n      options: {\n        responsive: true,\n        scales: {\n          y: {\n            beginAtZero: false\n          }\n        }\n      }\n    };\n    this.chart = new Chart(context, config);\n  }\n  initRevenueChart() {\n    const context = this.revenueChart.nativeElement.getContext('2d');\n    if (!context) {\n      console.error('Failed to get canvas context for revenue chart');\n      return;\n    }\n    const revenueChartData = {\n      labels: this.revenueTrends.dates,\n      datasets: [{\n        label: 'Revenue',\n        data: this.revenueTrends.revenues,\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.5)'\n      }]\n    };\n    new Chart(context, {\n      type: 'line',\n      data: revenueChartData,\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  }\n  initEarningsChart() {\n    const context = this.earningsChart.nativeElement.getContext('2d');\n    if (!context) {\n      console.error('Failed to get canvas context for earnings chart');\n      return;\n    }\n    const earningsChartData = {\n      labels: this.revenueTrends.dates,\n      datasets: [{\n        label: 'EPS',\n        data: this.earningsInsights.EPS,\n        borderColor: 'rgb(54, 162, 235)',\n        backgroundColor: 'rgba(54, 162, 235, 0.5)'\n      }]\n    };\n    new Chart(context, {\n      type: 'bar',\n      data: earningsChartData,\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  }\n  fetchHistoricalTopStocks() {\n    this.financeService.getHistoricalTopStocks().subscribe({\n      next: response => {\n        const chartData = {\n          labels: response.dates,\n          datasets: Object.keys(response.data).map(stock => ({\n            label: stock,\n            data: response.data[stock],\n            borderColor: this.getRandomColor(),\n            fill: false,\n            tension: 0.1\n          }))\n        };\n        this.initChart('line', chartData);\n      },\n      error: err => {\n        this.error = 'Failed to fetch historical stock data';\n        console.error(err);\n      }\n    });\n  }\n  getRandomColor() {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n  searchTicker(ticker) {\n    this.financeService.getStockPrice(ticker).subscribe({\n      next: data => {\n        console.log('Stock Data:', data);\n        this.error = null;\n      },\n      error: err => {\n        this.error = \"Failed to fetch data for ticker: \" + ticker;\n        console.error(err);\n        this.stockData = null;\n      }\n    });\n  }\n  fetchMarketNews() {\n    this.financeService.getMarketNews().subscribe({\n      next: news => this.marketNews = news,\n      error: err => this.handleError(err)\n    });\n  }\n  handleError(error) {\n    console.error('An error occurred:', error);\n    this.error = 'Failed to load data. Please try again later.';\n  }\n  toggleTheme() {\n    document.body.classList.toggle('is-light');\n  }\n};\n__decorate([ViewChild('stockChart')], AppComponent.prototype, \"stockChart\", void 0);\n__decorate([ViewChild('revenueChart')], AppComponent.prototype, \"revenueChart\", void 0);\n__decorate([ViewChild('earningsChart')], AppComponent.prototype, \"earningsChart\", void 0);\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"names":["Component","ViewChild","Chart","CategoryScale","LinearScale","PointElement","LineElement","LineController","Title","Tooltip","Legend","register","AppComponent","constructor","financeService","error","ticker","stockData","revenueTrends","dates","revenues","earningsInsights","EPS","ProfitMargin","ngOnInit","fetchHistoricalTopStocks","fetchMarketNews","ngAfterViewInit","initCharts","initRevenueChart","initEarningsChart","changeChart","type","initChart","labels","Object","keys","datasets","data","values","label","borderColor","tension","chart","destroy","context","stockChart","nativeElement","getContext","console","config","options","responsive","scales","y","beginAtZero","revenueChart","revenueChartData","backgroundColor","earningsChart","earningsChartData","getHistoricalTopStocks","subscribe","next","response","chartData","map","stock","getRandomColor","fill","err","letters","color","i","Math","floor","random","searchTicker","getStockPrice","log","getMarketNews","news","marketNews","handleError","toggleTheme","document","body","classList","toggle","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\musas\\Documents\\Projects\\SLO-Monitoring-Dashboard\\frontend\\src\\app\\app.component.ts"],"sourcesContent":["import { Component, ElementRef, OnInit, ViewChild, AfterViewInit } from '@angular/core';\nimport { FinanceService } from './services/finance.service';\nimport {\n  Chart,\n  CategoryScale,\n  ChartConfiguration,\n  LinearScale,\n  PointElement,\n  LineElement,\n  LineController,\n  Title,\n  Tooltip,\n  Legend,\n  ChartType,\n  ChartData,\n  ChartOptions,\n  ChartTypeRegistry\n} from 'chart.js';\n\nChart.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  LineController,\n  Title,\n  Tooltip,\n  Legend\n);\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit, AfterViewInit {\n  @ViewChild('stockChart') stockChart!: ElementRef<HTMLCanvasElement>;\n  @ViewChild('revenueChart') revenueChart!: ElementRef<HTMLCanvasElement>;\n  @ViewChild('earningsChart') earningsChart!: ElementRef<HTMLCanvasElement>;\n  chart!: Chart;\n  error: string | null = null;\n  ticker: string = '';\n  stockData: StockData | null = null;  // Use the interface and initialize as null\n  revenueTrends = {\n    dates: ['2024-01-01', '2024-02-01', '2024-03-01', '2024-04-01', '2024-05-01'],\n    revenues: [150000, 155000, 160000, 162000, 165000]\n  };\n  earningsInsights = {\n    EPS: ['2.50', '2.75', '3.00', '3.25', '3.50'],\n    ProfitMargin: ['20%', '21%', '21.5%', '22%', '22.5%']\n  };\n  marketNews: any;\n\n  constructor(private financeService: FinanceService) { }\n\n  ngOnInit() {\n    this.fetchHistoricalTopStocks();\n    this.fetchMarketNews();\n  }\n\n  ngAfterViewInit() {\n    this.initCharts();\n  }\n\n  initCharts(): void {\n    this.initRevenueChart();\n    this.initEarningsChart();\n  }\n\n  changeChart(type: ChartType) {\n    if (!this.stockData) {\n      return; // Guard clause if there's no data\n    }\n    this.initChart(type, {\n      labels: Object.keys(this.stockData), // Adjust accordingly\n      datasets: [{\n        data: Object.values(this.stockData), // Adjust accordingly\n        label: \"Stock Performance\",\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1\n      }]\n    });\n  }\n\n  initChart(type: keyof ChartTypeRegistry, data: ChartConfiguration['data']) {\n    if (this.chart) {\n      this.chart.destroy();\n    }\n\n    const context = this.stockChart.nativeElement.getContext('2d');\n    if (!context) {\n      console.error('Failed to get canvas context');\n      return;\n    }\n\n    const config: ChartConfiguration = {\n      type: type as keyof ChartTypeRegistry,\n      data: data,\n      options: {\n        responsive: true,\n        scales: {\n          y: {\n            beginAtZero: false\n          }\n        }\n      }\n    };\n\n    this.chart = new Chart(context, config);\n  }\n\n  initRevenueChart() {\n    const context = this.revenueChart.nativeElement.getContext('2d');\n    if (!context) {\n      console.error('Failed to get canvas context for revenue chart');\n      return;\n    }\n    const revenueChartData = {\n      labels: this.revenueTrends.dates,\n      datasets: [{\n        label: 'Revenue',\n        data: this.revenueTrends.revenues,\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.5)'\n      }]\n    };\n    new Chart(context, {\n      type: 'line',\n      data: revenueChartData,\n      options: { scales: { y: { beginAtZero: true } } }\n    });\n  }\n\n  initEarningsChart() {\n    const context = this.earningsChart.nativeElement.getContext('2d');\n    if (!context) {\n      console.error('Failed to get canvas context for earnings chart');\n      return;\n    }\n    const earningsChartData = {\n      labels: this.revenueTrends.dates,\n      datasets: [{\n        label: 'EPS',\n        data: this.earningsInsights.EPS,\n        borderColor: 'rgb(54, 162, 235)',\n        backgroundColor: 'rgba(54, 162, 235, 0.5)'\n      }]\n    };\n    new Chart(context, {\n      type: 'bar',\n      data: earningsChartData,\n      options: { scales: { y: { beginAtZero: true } } }\n    });\n  }\n\n  fetchHistoricalTopStocks() {\n    this.financeService.getHistoricalTopStocks().subscribe({\n      next: (response) => {\n        const chartData = {\n          labels: response.dates,\n          datasets: Object.keys(response.data).map(stock => ({\n            label: stock,\n            data: response.data[stock],\n            borderColor: this.getRandomColor(),\n            fill: false,\n            tension: 0.1\n          }))\n        };\n        this.initChart('line', chartData);\n      },\n      error: (err) => {\n        this.error = 'Failed to fetch historical stock data';\n        console.error(err);\n      }\n    });\n  }\n\n  getRandomColor(): string {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\n  searchTicker(ticker: string) {\n    this.financeService.getStockPrice(ticker).subscribe({\n      next: (data) => {\n        console.log('Stock Data:', data);\n        this.error = null;\n      },\n      error: (err) => {\n        this.error = \"Failed to fetch data for ticker: \" + ticker;\n        console.error(err);\n        this.stockData = null;\n      }\n    });\n  }\n\n  fetchMarketNews() {\n    this.financeService.getMarketNews().subscribe({\n      next: (news) => this.marketNews = news,\n      error: (err) => this.handleError(err)\n    });\n  }\n\n  handleError(error: any) {\n    console.error('An error occurred:', error);\n    this.error = 'Failed to load data. Please try again later.';\n  }\n\n  toggleTheme(): void {\n    document.body.classList.toggle('is-light');\n  }\n}\n\ninterface StockData {\n  closing_price: number;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}