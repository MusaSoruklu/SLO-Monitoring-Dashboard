{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass FinanceService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:5000'; // Base URL for API endpoints\n  }\n\n  getStockPrice(ticker) {\n    return this.http.get(`${this.baseUrl}/stock/${ticker}`);\n  }\n  getHistoricalTopStocks() {\n    return this.http.get(`${this.baseUrl}/top-stocks/historical`);\n  }\n  getMetrics() {\n    return this.http.get(`${this.baseUrl}/metrics`, {\n      responseType: 'text'\n    });\n  }\n  getTopStocks() {\n    return this.http.get(`${this.baseUrl}/top-stocks`);\n  }\n  getRevenueTrends(ticker) {\n    return this.http.get(`${this.baseUrl}/revenue-trends/${ticker}`);\n  }\n  getEarningsInsights() {\n    return this.http.get(`${this.baseUrl}/earnings-insights`);\n  }\n  getMarketNews() {\n    return this.http.get(`${this.baseUrl}/market-news`);\n  }\n  static #_ = this.ɵfac = function FinanceService_Factory(t) {\n    return new (t || FinanceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FinanceService,\n    factory: FinanceService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { FinanceService };","map":{"version":3,"names":["FinanceService","constructor","http","baseUrl","getStockPrice","ticker","get","getHistoricalTopStocks","getMetrics","responseType","getTopStocks","getRevenueTrends","getEarningsInsights","getMarketNews","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\musas\\Documents\\Projects\\SLO-Monitoring-Dashboard\\frontend\\src\\app\\services\\finance.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FinanceService {\n\n  private baseUrl = 'http://localhost:5000'; // Base URL for API endpoints\n\n  constructor(private http: HttpClient) { }\n\n  getStockPrice(ticker: string): Observable<any> {\n    return this.http.get(`${this.baseUrl}/stock/${ticker}`);\n  }\n\n  getHistoricalTopStocks(): Observable<any> {\n    return this.http.get(`${this.baseUrl}/top-stocks/historical`);\n  }\n\n  getMetrics(): Observable<any> {\n    return this.http.get(`${this.baseUrl}/metrics`, { responseType: 'text' });\n  }\n\n  getTopStocks(): Observable<StockData> {\n    return this.http.get<StockData>(`${this.baseUrl}/top-stocks`);\n  }\n\n  getRevenueTrends(ticker: string): Observable<any> {\n    return this.http.get(`${this.baseUrl}/revenue-trends/${ticker}`);\n  }\n\n  getEarningsInsights(): Observable<any> {\n    return this.http.get(`${this.baseUrl}/earnings-insights`);\n  }\n\n  getMarketNews(): Observable<any> {\n    return this.http.get(`${this.baseUrl}/market-news`);\n  }\n}\n\nexport interface StockData {\n  [key: string]: number;\n}\n"],"mappings":";;AAIA,MAGaA,cAAc;EAIzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,uBAAuB,CAAC,CAAC;EAEH;;EAExCC,aAAaA,CAACC,MAAc;IAC1B,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAC,GAAG,IAAI,CAACH,OAAO,UAAUE,MAAM,EAAE,CAAC;EACzD;EAEAE,sBAAsBA,CAAA;IACpB,OAAO,IAAI,CAACL,IAAI,CAACI,GAAG,CAAC,GAAG,IAAI,CAACH,OAAO,wBAAwB,CAAC;EAC/D;EAEAK,UAAUA,CAAA;IACR,OAAO,IAAI,CAACN,IAAI,CAACI,GAAG,CAAC,GAAG,IAAI,CAACH,OAAO,UAAU,EAAE;MAAEM,YAAY,EAAE;IAAM,CAAE,CAAC;EAC3E;EAEAC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACR,IAAI,CAACI,GAAG,CAAY,GAAG,IAAI,CAACH,OAAO,aAAa,CAAC;EAC/D;EAEAQ,gBAAgBA,CAACN,MAAc;IAC7B,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAC,GAAG,IAAI,CAACH,OAAO,mBAAmBE,MAAM,EAAE,CAAC;EAClE;EAEAO,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACV,IAAI,CAACI,GAAG,CAAC,GAAG,IAAI,CAACH,OAAO,oBAAoB,CAAC;EAC3D;EAEAU,aAAaA,CAAA;IACX,OAAO,IAAI,CAACX,IAAI,CAACI,GAAG,CAAC,GAAG,IAAI,CAACH,OAAO,cAAc,CAAC;EACrD;EAAC,QAAAW,CAAA,G;qBAhCUd,cAAc,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdnB,cAAc;IAAAoB,OAAA,EAAdpB,cAAc,CAAAqB,IAAA;IAAAC,UAAA,EAFb;EAAM;;SAEPtB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}